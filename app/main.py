"""
Archivo principal de la aplicaci√≥n FastAPI - PillCare 360
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from contextlib import asynccontextmanager

from app.core.config import get_settings
from app.core.database import create_tables, test_connection, get_db_info
from app.api import api_router
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

settings = get_settings()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gesti√≥n del ciclo de vida de la aplicaci√≥n"""
    # Startup
    logger.info("üöÄ Iniciando PillCare 360 API...")
    logger.info(f"üåç Ambiente: {settings.ENVIRONMENT}")
    logger.info(f"üîë Debug: {settings.DEBUG}")

    # Verificar conexi√≥n a la base de datos
    if test_connection():
        logger.info("‚úÖ Conexi√≥n a MySQL exitosa")

        # Mostrar informaci√≥n de la base de datos
        db_info = get_db_info()
        if db_info:
            logger.info(f"üìä MySQL {db_info['mysql_version']} - DB: {db_info['database_name']}")

        # Crear tablas si no existen
        try:
            create_tables()
            logger.info("‚úÖ Esquema de base de datos verificado")
        except Exception as e:
            logger.error(f"‚ùå Error al verificar esquema: {e}")
    else:
        logger.error("‚ùå Error de conexi√≥n a MySQL")
        logger.warning("‚ö†Ô∏è La aplicaci√≥n continuar√° pero sin base de datos")

    logger.info("üéØ PillCare 360 API lista para recibir requests")
    yield

    # Shutdown
    logger.info("üõë Cerrando PillCare 360 API...")


def create_application() -> FastAPI:
    """Factory function para crear la aplicaci√≥n FastAPI"""

    # Configuraci√≥n de la aplicaci√≥n
    app_config = {
        "title": settings.PROJECT_NAME,
        "description": """
## PillCare 360 API

API REST para la gesti√≥n inteligente de medicamentos y tratamientos m√©dicos.

### Caracter√≠sticas principales:
- üë• Gesti√≥n de pacientes y cuidadores
- üíä Cat√°logo de medicamentos
- üìã Tratamientos personalizados
- ‚è∞ Alarmas y recordatorios
- üìä Monitoreo de cumplimiento
- üö® Sistema de alertas
- üìà Reportes y anal√≠ticas

### Seguridad:
- Autenticaci√≥n JWT
- Control de acceso basado en roles
- Encriptaci√≥n de datos sensibles
        """,
        "version": "1.0.0",
        "contact": {
            "name": "PillCare 360 Support",
            "email": "support@pillcare360.com",
        },
        "license_info": {
            "name": "MIT License",
        },
        "lifespan": lifespan,
    }

    # En producci√≥n, ocultar documentaci√≥n
    if settings.is_production:
        app_config.update({
            "docs_url": None,
            "redoc_url": None,
            "openapi_url": None
        })

    app = FastAPI(**app_config)

    # Configurar middlewares
    setup_middlewares(app)

    # Configurar rutas
    setup_routes(app)

    return app


def setup_middlewares(app: FastAPI):
    """Configurar middlewares de la aplicaci√≥n"""

    # CORS - Configuraci√≥n para desarrollo y producci√≥n
    cors_config = {
        "allow_origins": settings.CORS_ORIGINS,
        "allow_credentials": True,
        "allow_methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
        "allow_headers": ["*"],
        "expose_headers": ["*"]
    }

    if settings.DEBUG:
        # En desarrollo, permitir m√°s or√≠genes
        cors_config["allow_origins"] = ["*"]
        cors_config["allow_credentials"] = False

    app.add_middleware(CORSMiddleware, **cors_config)

    # Trusted hosts middleware (solo en producci√≥n)
    if settings.is_production:
        app.add_middleware(
            TrustedHostMiddleware,
            allowed_hosts=["*.pillcare360.com", "pillcare360.com", "localhost"]
        )


def setup_routes(app: FastAPI):
    """Configurar rutas de la aplicaci√≥n"""

    # Endpoint ra√≠z
    @app.get("/")
    async def root():
        return {
            "message": "üè• PillCare 360 API",
            "version": "1.0.0",
            "environment": settings.ENVIRONMENT,
            "documentation": "/docs" if not settings.is_production else "Contact support for API documentation",
            "health": "/health",
            "api": "/api"
        }

    # Health check general
    @app.get("/health")
    async def health_check():
        """Health check completo de la aplicaci√≥n"""
        db_status = "connected" if test_connection() else "disconnected"

        health_status = {
            "status": "healthy" if db_status == "connected" else "degraded",
            "service": "PillCare 360 API",
            "version": "1.0.0",
            "environment": settings.ENVIRONMENT,
            "database": {
                "status": db_status,
                "type": "MySQL"
            },
            "timestamp": "2025-01-01T00:00:00Z"  # En implementaci√≥n real, usar datetime.utcnow()
        }

        # Informaci√≥n adicional en desarrollo
        if settings.DEBUG:
            db_info = get_db_info()
            if db_info:
                health_status["database"].update(db_info)

        return health_status

    # Incluir router principal de la API
    app.include_router(
        api_router,
        prefix="/api"
    )


# Crear la aplicaci√≥n
app = create_application()


# Solo para desarrollo con uvicorn run
if __name__ == "__main__":
    import uvicorn

    # Configuraci√≥n para desarrollo
    uvicorn_config = {
        "app": "app.main:app",
        "host": settings.HOST,
        "port": settings.PORT,
        "reload": settings.DEBUG,
        "log_level": settings.LOG_LEVEL.lower(),
        "access_log": settings.DEBUG,
    }

    logger.info("üöÄ Iniciando servidor de desarrollo...")
    logger.info(f"üåê URL: http://{settings.HOST}:{settings.PORT}")
    logger.info(f"üìö Docs: http://{settings.HOST}:{settings.PORT}/docs")
    logger.info(f"üîç Redoc: http://{settings.HOST}:{settings.PORT}/redoc")
    logger.info(f"üí° Health: http://{settings.HOST}:{settings.PORT}/health")

    uvicorn.run(**uvicorn_config)